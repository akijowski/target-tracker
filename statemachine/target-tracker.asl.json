{
    "Comment": "A state machine that monitors Target for product availability",
    "StartAt": "TrackProducts",
    "States": {
        "TrackProducts": {
            "Type": "Map",
            "ItemsPath": "$.products",
            "Iterator": {
                "StartAt": "GetProduct",
                "States": {
                    "GetProduct": {
                        "Type": "Task",
                        "Resource": "arn:aws:states:::lambda:invoke",
                        "Parameters": {
                            "FunctionName": "${ProductCheckerFunction}",
                            "Payload.$": "$"
                        },
                        "ResultPath": "$.result",
                        "ResultSelector": {
                            "stores.$": "$.Payload.stores",
                            "total_stores.$": "$.Payload.total_stores",
                            "db_ttl.$": "$.Payload.db_ttl"
                        },
                        "Retry": [
                            {
                                "ErrorEquals": [
                                    "Lambda.ServiceException",
                                    "Lambda.AWSLambdaException",
                                    "Lambda.SdkClientException"
                                ],
                                "IntervalSeconds": 2,
                                "MaxAttempts": 6,
                                "BackoffRate": 2
                            }
                        ],
                        "Next": "SaveToDynamo"
                    },
                    "SaveToDynamo": {
                        "Type": "Task",
                        "Comment": "Save result to DynamoDB",
                        "Resource": "arn:aws:states:::dynamodb:putItem",
                        "Parameters": {
                            "TableName": "${ResultsTableName}",
                            "Item": {
                                "PK": {
                                    "S.$": "$.name"
                                },
                                "SK": {
                                    "S.$": "$$.Execution.StartTime"
                                },
                                "tcin": {
                                    "S.$": "$.tcin"
                                },
                                "desired_quantity": {
                                    "N.$": "States.JsonToString($.desired_quantity)"
                                },
                                "total_stores": {
                                    "N.$": "States.JsonToString($.result.total_stores)"
                                },
                                "result": {
                                    "S.$": "States.JsonToString($.result)"
                                },
                                "TTL": {
                                    "N.$": "States.JsonToString($.result.db_ttl)"
                                }
                            },
                            "ReturnConsumedCapacity": "NONE",
                            "ReturnItemCollectionMetrics": "NONE",
                            "ReturnValues": "NONE"
                        },
                        "ResultSelector": {
                            "statusCode.$": "$.SdkHttpMetadata.HttpStatusCode"
                        },
                        "ResultPath": "$.dynamodb",
                        "End": true
                    }
                }
            },
            "ResultPath": "$.products",
            "Next": "ProcessResults"
        },
        "ProcessResults": {
            "Type": "Parallel",
            "Branches": [
                {
                    "StartAt": "HistoricalStats",
                    "States": {
                        "HistoricalStats": {
                            "Type": "Task",
                            "Comment": "Calculate and store stats in an S3 bucket",
                            "Resource": "arn:aws:states:::lambda:invoke",
                            "Parameters": {
                                "FunctionName": "${HistoricalStatsFunction}",
                                "Payload.$": "$"
                            },
                            "ResultPath": null,
                            "Retry": [
                                {
                                    "ErrorEquals": [
                                        "Lambda.ServiceException",
                                        "Lambda.AWSLambdaException",
                                        "Lambda.SdkClientException"
                                    ],
                                    "IntervalSeconds": 2,
                                    "MaxAttempts": 6,
                                    "BackoffRate": 2
                                }
                            ],
                            "End": true
                        }
                    }
                },
                {
                    "StartAt": "FormatMessage",
                    "States": {
                        "FormatMessage": {
                            "Type": "Task",
                            "Resource": "arn:aws:states:::lambda:invoke",
                            "Parameters": {
                                "FunctionName": "${MessageFormatterFunction}",
                                "Payload.$": "$"
                            },
                            "ResultPath": "$.message",
                            "ResultSelector": {
                                "body.$": "$.Payload"
                            },
                            "Retry": [
                                {
                                    "ErrorEquals": [
                                        "Lambda.ServiceException",
                                        "Lambda.AWSLambdaException",
                                        "Lambda.SdkClientException"
                                    ],
                                    "IntervalSeconds": 2,
                                    "MaxAttempts": 6,
                                    "BackoffRate": 2
                                }
                            ],
                            "Next": "ShouldAlert?"
                        },
                        "ShouldAlert?": {
                            "Type": "Choice",
                            "Choices": [
                                {
                                    "Comment": "Is there any product worth alerting on?  An empty message means no alert is needed",
                                    "StringGreaterThan": "",
                                    "Variable": "$.message.body",
                                    "Next": "AlertOnProduct"
                                }
                            ],
                            "Default": "Pass"
                        },
                        "Pass": {
                            "Type": "Succeed"
                        },
                        "AlertOnProduct": {
                            "Type": "Task",
                            "Comment": "Send an alert to the SNS topic",
                            "Resource": "arn:aws:states:::sns:publish",
                            "Parameters": {
                                "TopicArn": "${AlertTopicArn}",
                                "Message.$": "$.message.body"
                            },
                            "ResultPath": null,
                            "End": true
                        }
                    }
                }
            ],
            "End": true
        }
    }
}
